WHITESPACE = _{ " " | "\t" | "\r" | "\n" }
COMMENT = _{ "//" ~ (!"\n" ~ ANY)* }

program = { SOI ~ stmt* ~ EOI }
stmt = _{ assign | if_stmt | while_loop_stmt | for_loop_stmt | method_decl | method_call | method_return | output_stmt }

assign = { ident ~ "=" ~ expr }
if_stmt = { "if" ~ expr ~ "then" ~ stmt* ~ "end if" }
while_loop_stmt = { "loop" ~ "while" ~ expr ~ stmt* ~ "end loop" }
for_loop_stmt = { "loop" ~ ident ~ "from" ~ expr ~ "to" ~ expr ~ stmt* ~ "end loop" }
output_stmt = { "output" ~ expr ~ ("," ~ expr)* }

method_decl = {
    "method" ~ method_ident ~  "(" ~ method_decl_param_list? ~ ")"
    ~ stmt*
    ~ "end" ~ "method"
}
method_decl_param_list = { ident ~ ("," ~ ident)* }

method_call = { method_ident ~ "(" ~ method_call_param_list? ~ ")" }
method_call_param_list = _{ expr ~ ("," ~ expr)* }
method_return = { "return" ~ expr }


expr = { term ~ (operation ~ term)* }
term = _{ input | method_call | ident | number | string | "(" ~ expr ~ ")" }

operation = _{ add | subtract | multiply | divide | power | equal | not_equal | greater_equal | less_equal | greater | less  }
    add = { "+" }
    subtract = { "-" }
    multiply = { "*" }
    divide = { "/" }
    power = { "^" }
    modulo = { "%" }
    equal = { "==" }
    not_equal = { "!=" }
    greater_equal = { ">=" }
    less_equal = { "<=" }
    greater = { ">" }
    less = { "<" }

input = { "input" ~ "(" ~ expr? ~ ")" }
ident = @{ ASCII_ALPHA_UPPER ~ (ASCII_DIGIT | ASCII_ALPHA_UPPER | "_")* }
method_ident = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }
number = @{ int ~ ("." ~ ASCII_DIGIT*)? }
int = @{ ("+" | "-")? ~ ASCII_DIGIT+ }
string = @{ "\"" ~ ( "\\\"" | (!"\"" ~ ANY) )* ~ "\"" }
